<?xml version="1.0" encoding="utf-8" ?>
<manifest>
  <control namespace="chrizgl" constructor="CreateFromLookupField" version="0.0.3" display-name-key="CreateFromLookupField" description-key="CreateFromLookupField description" control-type="standard" >
    <!--external-service-usage node declares whether this 3rd party PCF control is using external service or not, if yes, this control will be considered as premium and please also add the external domain it is using.
    If it is not using any external service, please set the enabled="false" and DO NOT add any domain below. The "enabled" will be false by default.
    Example1:
      <external-service-usage enabled="true">
        <domain>www.Microsoft.com</domain>
      </external-service-usage>
    Example2:
      <external-service-usage enabled="false">
      </external-service-usage>
    -->
    <external-service-usage enabled="false">
      <!--UNCOMMENT TO ADD EXTERNAL DOMAINS
      <domain></domain>
      <domain></domain>
      -->
    </external-service-usage>
    <!-- property node identifies a specific, configurable piece of data that the control expects from CDS -->
    <property name="lookupfield" display-name-key="Lookup Field" description-key="Lookup field to render as dropdown" of-type="Lookup.Simple" usage="bound" required="true" />
    <property name="customtext" display-name-key="Custom Text" description-key="(Optional) customize display text with any text attributes of the record. put attribute schema names between curly braces {}. Ex. {new_firstname} {new_lastname}. Leave blank to show record primaryname." of-type="SingleLine.Text" usage="input" />
    <property name="customselecttext" display-name-key="Custom Select Text" description-key="(Optional) Custom text for dropdown selector text (default = Select)." of-type="SingleLine.Text" usage="input" />
    <property name="dependentlookupfield" display-name-key="Dependent Lookup Field" description-key="(Optional) Dependent Lookup field. Use when Related Records Filtering is set on the Field Properties." of-type="Lookup.Simple" usage="bound" />
    <!--
      Property node's of-type attribute can be of-type-group attribute.
      Example:
      <type-group name="numbers">
        <type>Whole.None</type>
        <type>Currency</type>
        <type>FP</type>
        <type>Decimal</type>
      </type-group>
      <property name="sampleProperty" display-name-key="Property_Display_Key" description-key="Property_Desc_Key" of-type-group="numbers" usage="bound" required="true" />
    -->
    <resources>
      <code path="index.ts" order="1"/>
      <!-- UNCOMMENT TO ADD MORE RESOURCES
      <css path="css/CreateFromLookupField.css" order="1" />
      <resx path="strings/CreateFromLookupField.1033.resx" version="1.0.0" />
      -->
    </resources>
    <feature-usage>
      <uses-feature name="Utility" required="true" />
      <uses-feature name="WebAPI" required="true" />
    </feature-usage>
  </control>
</manifest>
